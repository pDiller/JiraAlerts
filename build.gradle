ext {
    encoding = 'UTF-8'
}

buildscript {

    repositories {
        maven {
            jcenter()
            url("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.boxfuse.client:flyway-release:${flyWayVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}")
        classpath("com.diffplug.spotless:spotless-plugin-gradle:${spotlessVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'

group = 'io.reflectoring.jiraalerts'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = 1.8

allprojects {
    repositories {
        jcenter()
    }
}

apply from: 'gradle/libs.gradle'

dependencies {
    testCompile("javax.servlet:javax.servlet-api:${servletApiVersion}")
    testCompile libraries.dbUnit
    testCompile libraries.test

    compile libraries.wicket

    compile("org.apache.commons:commons-lang3:${apacheCommonsLang3Version}")

    compile("org.springframework:spring-context-support:${springContextSupportVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")

    compile("org.quartz-scheduler:quartz:${quartzVersion}")

    compile("org.flywaydb:flyway-core:${flyWayVersion}")

    compile libraries.jiraRestClient

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    runtime("mysql:mysql-connector-java")

    project("jira-rest-client")
}

bootRun {
    // use raw ressources instead of the output of processResources task
    addResources = true
}

apply from: 'gradle/idea.gradle'
apply from: 'gradle/formatter.gradle'
apply from: 'gradle/sass.gradle'
apply from: 'gradle/sonarqube.gradle'
